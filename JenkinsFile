pipeline {
  agent any;

  environment {

              NEXUS_VERSION = "nexus3"
              NEXUS_PROTOCOL = "http"
              NEXUS_URL = "192.168.56.2:8081"
              NEXUS_REPOSITORY = "vprofile-release"
              NEXUS_CREDENTIAL_ID = "NEXUS_CRED"
              DOCKER_CREDENTIAL_ID = "Docker-Creds"
              VERSION = "1.${env.BUILD_NUMBER}"



               }

  stages {
    stage("GIT") {
      steps {
        sh 'git checkout Projet1_MF'
        sh 'git pull origin Projet1_MF'
      }
    }
    stage("MAVEN BUILD") {
      steps {
        sh 'mvn clean install -Dmaven.test.skip=true'
      }
    }
    stage("SONARQUBE") {
      steps {
       sh "mvn sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar"
      }
    }
    stage("MOCKITO") {
      steps {
        sh "mvn test -Dtest=tn.esprit.spring.services.SkierServiceImpMock"
      }
    }

stage('MVN NEXUS')
        {
        steps {
        sh 'mvn  deploy -DskipTests  '
        }
        }
       //-DskipTests

  }


stage("Publish to Nexus Repository Manager") {
      steps {
        script {
          pom = readMavenPom file: "Spring/pom.xml";
          filesByGlob = findFiles(glob: "Spring/target/*.${pom.packaging}");
          echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
          artifactPath = filesByGlob[0].path;
          artifactExists = fileExists artifactPath;
          if (artifactExists) {
            echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${VERSION}";
            nexusArtifactUploader(
              nexusVersion: NEXUS_VERSION,
              protocol: NEXUS_PROTOCOL,
              nexusUrl: NEXUS_URL,
              groupId: pom.groupId,
              version: VERSION,
              repository: NEXUS_REPOSITORY,
              credentialsId: NEXUS_CREDENTIAL_ID,
              artifacts: [
                [artifactId: pom.artifactId,
                  classifier: '',
                  file: artifactPath,
                  type: pom.packaging
                ],
                [artifactId: pom.artifactId,
                  classifier: '',
                  file: "Spring/pom.xml",
                  type: "pom"
                ]
              ]
            );
          } else {
            error "*** File: ${artifactPath}, could not be found";
          }
        }
      }
      stage('Pull the file off Nexus') {
            steps {
              dir('Spring') {
                withCredentials([usernameColonPassword(credentialsId: 'NEXUS_CRED', variable: 'NEXUS_CREDENTIALS')]) {
                  sh script: 'curl -u ${NEXUS_CREDENTIALS} -o ./target/tpachat.jar "$NEXUS_URL/repository/$NEXUS_REPOSITORY/tn/esprit/spring/gestion-station-ski/$VERSION/gestion-station-ski-$VERSION.jar"'
                }
              }
            }
          }
    }
}